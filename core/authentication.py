"""
Backend de autentica√ß√£o externa para Canaim√©.

Este m√≥dulo implementa autentica√ß√£o via request HTTP para o sistema Canaim√©,
extraindo informa√ß√µes do usu√°rio e criando/autenticando localmente.
"""

import logging
import os
import requests
from django.contrib.auth.backends import BaseBackend
from django.contrib.auth.models import User
from django.contrib.auth import get_user_model
from bs4 import BeautifulSoup
import urllib3
from .models import PerfilUsuario

# Desabilita warnings de SSL para o Canaim√©
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logger = logging.getLogger(__name__)

User = get_user_model()


class CanaimeAuthBackend(BaseBackend):
    """
    Backend de autentica√ß√£o que valida credenciais no Canaim√©.
    
    Fluxo:
    1. Faz request POST para o Canaim√© com login/senha
    2. Extrai nome completo e foto da resposta HTML
    3. Cria ou atualiza usu√°rio local como OPERADOR
    4. Retorna o usu√°rio autenticado
    """
    
    def authenticate(self, request, username=None, password=None, **kwargs):
        """
        Backend Canaim√© - APENAS para cria√ß√£o de novos usu√°rios.
        
        N√ÉO interfere no login de usu√°rios existentes no banco local.
        S√≥ √© usado quando explicitamente chamado pela view.
        
        Args:
            request: Request HTTP
            username: Login
            password: Senha
            
        Returns:
            None - este backend n√£o autentica automaticamente
        """
        # Este backend n√£o autentica automaticamente
        # Ele √© usado apenas para valida√ß√£o manual via _authenticate_canaime
        return None
    
    def get_user(self, user_id):
        """Retorna usu√°rio pelo ID."""
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None
    
    def _authenticate_canaime(self, username, password):
        """
        Faz autentica√ß√£o no Canaim√© e extrai dados do usu√°rio.
        
        Args:
            username: Login
            password: Senha
            
        Returns:
            dict com dados do usu√°rio ou None se falhar
        """
        # URL de login alternativa sem reCAPTCHA
        login_url = os.getenv('CANAIME_LOGIN_URL', "https://canaime.com.br/sgp2rr/login/login_principal.php")
        
        # Headers de navegador sem JavaScript para evitar reCAPTCHA
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Referer': 'https://canaime.com.br/sgp2rr/login/login_principal.php',
        }
        
        # Dados de login (baseado nos nomes dos campos do formul√°rio)
        data = {
            'usuario': username,  # Campo correto √© "usuario", n√£o "login"
            'senha': password,
        }
        
        try:
            # Cria sess√£o para manter cookies
            session = requests.Session()
            session.headers.update(headers)
            
            # Primeiro, pega a p√°gina de login para obter cookies de sess√£o
            logger.info("Obtendo p√°gina de login para cookies de sess√£o...")
            login_page = session.get(
                login_url,
                verify=False,
                timeout=30
            )
            
            # Faz request POST para login ignorando certificados SSL
            logger.info(f"Fazendo login para usu√°rio: {username}")
            response = session.post(
                login_url, 
                data=data, 
                verify=False,  # Ignora erros de certificado
                timeout=30,
                allow_redirects=True
            )
            
            if response.status_code != 200:
                logger.warning(f"Canaim√© retornou status {response.status_code}")
                return None
            
            # Verifica se o login foi bem-sucedido (procura pelo iframe das √°reas)
            if 'iframe' not in response.text or 'areas/unidades/index.php' not in response.text:
                logger.warning(f"Login falhou - estrutura esperada n√£o encontrada. URL final: {response.url}")
                return None
            
            # Agora precisa buscar os dados do usu√°rio na p√°gina de √°reas
            logger.info("Buscando dados do usu√°rio na p√°gina de √°reas...")
            areas_url = os.getenv('CANAIME_AREAS_URL', "https://canaime.com.br/sgp2rr/areas/unidades/index.php")
            areas_response = session.get(
                areas_url,
                verify=False,
                timeout=30
            )
            
            if areas_response.status_code != 200:
                logger.warning(f"Falha ao acessar p√°gina de √°reas: {areas_response.status_code}")
                return None
            
            # Pega o HTML como bytes brutos para preservar encoding original
            nome_completo = None
            html_bytes = areas_response.content
            
            try:
                # Decodifica como ISO-8859-1 (que preserva todos os bytes como chars)
                html_bruto = html_bytes.decode('iso-8859-1')
                
                # Debug: compara HTML bruto vs processado
                logger.info(f"Tamanho HTML bytes: {len(html_bytes)}")
                logger.info(f"Tamanho HTML bruto: {len(html_bruto)}")
                logger.info(f"Tamanho HTML processado: {len(areas_response.text)}")
                
                # Procura por diferen√ßas no nome especificamente
                if 'tituloAmarelo' in html_bruto:
                    # Extrai um trecho pequeno com o nome para comparar
                    inicio = html_bruto.find('tituloAmarelo')
                    if inicio != -1:
                        trecho_bruto = html_bruto[inicio:inicio+200]
                        logger.info(f"Trecho bruto: {repr(trecho_bruto)}")
                        
                if 'tituloAmarelo' in areas_response.text:
                    inicio = areas_response.text.find('tituloAmarelo')
                    if inicio != -1:
                        trecho_processado = areas_response.text[inicio:inicio+200]
                        logger.info(f"Trecho processado: {repr(trecho_processado)}")
                
                # Debug: salva HTML para an√°lise
                try:
                    # Salva HTML bruto (preserva encoding original)
                    with open('logs/canaime_areas_bruto.html', 'w', encoding='iso-8859-1') as f:
                        f.write(html_bruto)
                    logger.info("HTML bruto salvo em logs/canaime_areas_bruto.html")
                    
                    # Salva HTML processado para compara√ß√£o
                    with open('logs/canaime_areas_processado.html', 'w', encoding='utf-8') as f:
                        f.write(areas_response.text)
                    logger.info("HTML processado salvo em logs/canaime_areas_processado.html")
                except Exception as e:
                    logger.warning(f"Erro ao salvar HTML debug: {e}")
                
                # Busca por padr√£o no HTML bruto que cont√©m o nome
                import re
                
                # Padr√£o para capturar conte√∫do da classe tituloAmarelo
                padrao_titulo = r'class="tituloAmarelo"[^>]*>(.*?)</strong>'
                matches = re.findall(padrao_titulo, html_bruto, re.DOTALL | re.IGNORECASE)
                
                logger.info(f"Total de matches encontrados: {len(matches)}")
                
                for i, match in enumerate(matches):
                    logger.info(f"=== MATCH {i+1} ===")
                    logger.info(f"Match bruto: {repr(match)}")
                    
                    # Remove tags HTML
                    texto_limpo = re.sub(r'<br[^>]*>', '\n', match, flags=re.IGNORECASE)
                    texto_limpo = re.sub(r'<[^>]+>', '', texto_limpo)
                    
                    # Separa por quebras de linha
                    linhas = []
                    for linha in texto_limpo.split('\n'):
                        linha_limpa = re.sub(r'\s+', ' ', linha.strip())
                        if linha_limpa:
                            linhas.append(linha_limpa)
                    
                    logger.info(f"Linhas extra√≠das: {linhas}")
                    
                    # Procura pela linha que cont√©m o nome (n√£o √© o username)
                    for j, linha in enumerate(linhas):
                        logger.info(f"  Linha {j+1}: '{linha}'")
                        
                        if (len(linha) > 10 and 
                            ' ' in linha and 
                            linha != username and
                            not linha.isalnum()):
                            
                            logger.info(f"  ‚úÖ LINHA APROVADA: {linha}")
                            
                            # CORRE√á√ÉO: Usa a l√≥gica que funciona no teste manual
                            # Remove o username se estiver concatenado
                            nome_sem_username = linha
                            if username in linha:
                                nome_sem_username = linha.replace(username, '')
                                logger.info(f"  üîß Username removido: '{linha}' -> '{nome_sem_username}'")
                            
                            # Aplica corre√ß√£o CP1252 apenas se detectar encoding corrompido
                            if '\x87' in nome_sem_username or '√É\x83' in nome_sem_username:
                                try:
                                    # Corre√ß√£o gen√©rica de encoding corrompido do Canaim√©
                                    # Mapeamento de caracteres corrompidos mais comuns
                                    correcoes_encoding = {
                                        '√É\x87√É\x83': '√á',  # √á√ÉO
                                        '√É\x87': '√á',       # √á
                                        '√É\x83': '√É',       # √É
                                        '√É\x81': '√Å',       # √Å
                                        '√É\x89': '√â',       # √â
                                        '√É\x8d': '√ç',       # √ç
                                        '√É\x93': '√ì',       # √ì
                                        '√É\x9a': '√ö',       # √ö
                                        '√É\x80': '√Ä',       # √Ä
                                        '√É\x88': '√à',       # √à
                                        '√É\x82': '√Ç',       # √Ç
                                        '√É\x8a': '√ä',       # √ä
                                        '√É\x94': '√î',       # √î
                                    }
                                    
                                    nome_corrigido = nome_sem_username
                                    for corrompido, correto in correcoes_encoding.items():
                                        nome_corrigido = nome_corrigido.replace(corrompido, correto)
                                    
                                    nome_completo = nome_corrigido.strip()
                                    logger.info(f"  ‚úÖ CORRE√á√ÉO DE ENCODING APLICADA: '{nome_sem_username}' -> '{nome_completo}'")
                                except Exception as e:
                                    nome_completo = nome_sem_username.strip()
                                    logger.info(f"  ‚ö†Ô∏è CORRE√á√ÉO FALHOU ({e}): mantendo '{nome_sem_username}'")
                            else:
                                # Nome j√° est√° correto, n√£o precisa de corre√ß√£o
                                nome_completo = nome_sem_username.strip()
                                logger.info(f"  ‚úÖ NOME J√Å CORRETO: '{nome_completo}'")
                            break
                        else:
                            logger.info(f"  ‚ùå Linha rejeitada")
                            
                    if nome_completo:
                        logger.info(f"‚úÖ NOME ENCONTRADO NO MATCH {i+1}: {nome_completo}")
                        break
                        
            except Exception as e:
                logger.debug(f"Erro ao extrair nome do HTML bruto: {str(e)}")
                
            # Fallback: usa BeautifulSoup se n√£o conseguiu extrair do HTML bruto
            if not nome_completo:
                soup = BeautifulSoup(areas_response.text, 'html.parser')
                elementos_titulo = soup.select('.tituloAmarelo')
                for elem in elementos_titulo:
                    texto_completo = elem.get_text()
                    if '\n' in texto_completo:
                        linhas = [linha.strip() for linha in texto_completo.split('\n') if linha.strip()]
                        for linha in linhas:
                            if (len(linha) > 10 and ' ' in linha and linha != username):
                                nome_completo = linha
                                logger.info(f"Nome encontrado via BeautifulSoup fallback: {nome_completo}")
                                break
                        if nome_completo:
                            break
            
            if nome_completo:
                # Limpa e processa o nome
                nome_completo = self._processar_nome(nome_completo, username)
                logger.info(f"Nome processado: {nome_completo}")
            else:
                # Se n√£o encontrou nome, usa o username como fallback
                logger.warning("Nome n√£o encontrado na p√°gina de √°reas, usando username como fallback")
                nome_completo = username.title()
            
            # Extrai foto de /html/body/table[1]/tbody/tr/td[3]/img
            foto_url = None
            try:
                # Cria BeautifulSoup se ainda n√£o existe
                if 'soup' not in locals():
                    soup = BeautifulSoup(areas_response.text, 'html.parser')
                    
                foto_element = soup.select('body > table:nth-of-type(1) tbody tr td:nth-of-type(3) img')
                if not foto_element:
                    foto_element = soup.select('table:first-of-type tbody tr td:nth-of-type(3) img')
                    
                if foto_element:
                    foto_src = foto_element[0].get('src')
                    if foto_src:
                        # Se for URL relativa, faz absoluta
                        if foto_src.startswith('/'):
                            foto_url = f"https://canaime.com.br{foto_src}"
                        elif not foto_src.startswith('http'):
                            foto_url = f"https://canaime.com.br/sgp2rr/areas/{foto_src}"
                        else:
                            foto_url = foto_src
                        logger.info(f"Foto extra√≠da: {foto_url}")
            except Exception as e:
                logger.warning(f"Erro ao extrair foto: {str(e)}")
            
            # Valida se conseguiu extrair pelo menos o nome
            if not nome_completo or len(nome_completo.strip()) < 3:
                logger.warning(f"Nome extra√≠do inv√°lido: '{nome_completo}'")
                return None
            
            # Separa primeiro nome e sobrenome
            partes_nome = nome_completo.strip().split()
            if len(partes_nome) >= 2:
                first_name = partes_nome[0]
                last_name = ' '.join(partes_nome[1:])
            else:
                first_name = nome_completo.strip()
                last_name = ''
            
            return {
                'nome_completo': nome_completo,
                'first_name': first_name,
                'last_name': last_name,
                'foto_url': foto_url,
                'username': username
            }
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Erro de rede ao conectar SGP2RR: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"Erro inesperado na autentica√ß√£o SGP2RR: {str(e)}")
            return None
    
    def _processar_nome(self, nome_bruto, username):
        """
        Processa o nome extra√≠do do Canaim√©.
        
        - Remove o username se estiver concatenado
        - Corrige problemas de encoding
        - Retorna apenas primeiro e √∫ltimo nome
        
        Args:
            nome_bruto: Nome como extra√≠do do HTML
            username: Login do usu√°rio para remover se estiver concatenado
            
        Returns:
            Nome limpo no formato "Primeiro √öltimo"
        """
        try:
            logger.info(f"üéØ Processando nome encontrado: '{nome_bruto}'")
            
            # Remove o username se estiver no final do nome (mais seguro)
            if username in nome_bruto:
                # Remove apenas se estiver no final (evita remover partes do nome)
                if nome_bruto.endswith(username):
                    nome_limpo = nome_bruto[:-len(username)]
                    logger.info(f"üîß Username removido do final: '{nome_bruto}' -> '{nome_limpo}'")
                else:
                    nome_limpo = nome_bruto.replace(username, '')
                    logger.info(f"üîß Username removido: '{nome_bruto}' -> '{nome_limpo}'")
            else:
                nome_limpo = nome_bruto
                logger.info(f"üîß Username n√£o encontrado no nome, mantendo: '{nome_limpo}'")
            
            # Remove caracteres especiais e n√∫meros extras, mas preserva acentos
            import re
            nome_limpo = re.sub(r'[^\w\s√Ä-√ø]', ' ', nome_limpo)
            logger.info(f"üîß Ap√≥s remover caracteres especiais: '{nome_limpo}'")
            
            # Remove espa√ßos extras e normaliza
            nome_limpo = ' '.join(nome_limpo.split())
            logger.info(f"üîß Ap√≥s normalizar espa√ßos: '{nome_limpo}'")
            
            # Converte para title case
            nome_limpo = nome_limpo.title()
            logger.info(f"üîß Ap√≥s title case: '{nome_limpo}'")
            
            # Extrai apenas primeiro e √∫ltimo nome
            partes = nome_limpo.split()
            if len(partes) >= 2:
                primeiro_nome = partes[0]
                ultimo_nome = partes[-1]
                nome_final = f"{primeiro_nome} {ultimo_nome}"
                logger.info(f"‚úÖ Nome final (primeiro + √∫ltimo): '{nome_final}'")
            elif len(partes) == 1:
                nome_final = partes[0]
                logger.info(f"‚úÖ Nome final (apenas um): '{nome_final}'")
            else:
                nome_final = "Usu√°rio"
                logger.info(f"‚ö†Ô∏è Nome final (fallback): '{nome_final}'")
            
            return nome_final
            
        except Exception as e:
            logger.error(f"Erro ao processar nome '{nome_bruto}': {str(e)}")
            # Fallback: usa apenas o primeiro nome se poss√≠vel
            try:
                primeira_palavra = nome_bruto.split()[0] if nome_bruto.split() else "Usu√°rio"
                return primeira_palavra.title()
            except:
                return "Usu√°rio"
    
    def _create_or_update_user(self, username, canaime_data, password=None):
        """
        Cria ou atualiza usu√°rio local com dados do Canaim√©.
        
        Args:
            username: Login do usu√°rio
            canaime_data: Dados extra√≠dos do Canaim√©
            password: Senha do usu√°rio (opcional)
            
        Returns:
            User object
        """
        try:
            # Tenta encontrar usu√°rio existente
            try:
                user = User.objects.get(username=username)
                # Atualiza dados do usu√°rio existente
                user.first_name = canaime_data['first_name']
                user.last_name = canaime_data['last_name']
                
                # Se uma senha foi fornecida, atualiza ela tamb√©m
                if password:
                    user.set_password(password)
                
                user.save()
                logger.info(f"Usu√°rio existente atualizado: {username}")
                
            except User.DoesNotExist:
                # Cria novo usu√°rio
                user = User.objects.create_user(
                    username=username,
                    first_name=canaime_data['first_name'],
                    last_name=canaime_data['last_name'],
                    is_staff=False,  # Usu√°rios Canaim√© n√£o s√£o staff por padr√£o
                    is_active=True
                )
                
                # Define a senha do Canaim√© para permitir login local futuro
                if password:
                    user.set_password(password)
                    logger.info(f"Senha definida para usu√°rio: {username}")
                else:
                    # Fallback: senha tempor√°ria baseada no username
                    user.set_password(f"{username}_temp_2024")
                    logger.warning(f"Senha tempor√°ria definida para usu√°rio: {username}")
                
                user.save()
                logger.info(f"Novo usu√°rio criado: {username}")
            
            # Cria ou atualiza perfil como OPERADOR
            perfil, created = PerfilUsuario.objects.get_or_create(
                usuario=user,
                defaults={
                    'tipo_usuario': 'OPERADOR',
                    'precisa_trocar_senha': False,  # N√£o precisa trocar pois usa mesma senha do Canaim√©
                    'foto_sgp2rr': canaime_data.get('foto_url', '')
                }
            )
            
            if not created:
                # Atualiza foto se mudou
                if canaime_data.get('foto_url'):
                    perfil.foto_sgp2rr = canaime_data['foto_url']
                    perfil.save()
            
            return user
            
        except Exception as e:
            logger.error(f"Erro ao criar/atualizar usu√°rio {username}: {str(e)}")
            return None 